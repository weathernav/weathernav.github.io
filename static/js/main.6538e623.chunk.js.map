{"version":3,"sources":["components/Map.js","components/LocationSearch.js","components/Controls.js","App.js","serviceWorker.js","index.js"],"names":["Map","compose","withProps","loadingElement","react_default","a","createElement","style","height","containerElement","mapElement","withGoogleMap","lifecycle","componentDidMount","_this","this","gmaps","google","maps","DirectionsService","route","origin","LatLng","destination","travelMode","TravelMode","DRIVING","result","status","DirectionsStatus","OK","setState","directions","console","error","concat","props","lib","defaultZoom","defaultCenter","lat","lng","LocationSearch","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","open","coordinates","errorMessage","onClose","bind","assertThisInitialized","onSuggestionSelected","suggestion","_this2","geocodeBySuggestion","then","results","length","geometry","location","catch","err","message","_this$state","label","dist_default","renderTarget","textFieldProps","Snackbar_default","anchorOrigin","vertical","horizontal","autoHideDuration","renderMessage","width","React","Component","description","withStyles","theme","root","heading","fontSize","typography","pxToRem","fontWeight","fontWeightRegular","classes","className","ExpansionPanel_default","expanded","ExpansionPanelSummary_default","expandIcon","ExpandMore_default","Typography_default","ExpansionPanelDetails_default","components_LocationSearch","App","CssBaseline_default","components_Controls","components_Map","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6538e623.chunk.js","sourcesContent":["import React from 'react'\nimport { compose, withProps, lifecycle } from \"recompose\"\nimport { withGoogleMap, GoogleMap, DirectionsRenderer } from \"react-google-maps\"\n\nconst Map = compose(\n  withProps({\n    // googleMapURL:\"https://maps.googleapis.com/maps/api/js?exp&libraries=places,directions&key=AIzaSyCD15-lexoV0aFOvKchs4P6B6T-IqdSq-Y\",\n    loadingElement: <div style={{ height: `100%` }} />,\n    containerElement: <div style={{ height: `100vh` }} />,\n    mapElement: <div style={{ height: `100%` }} />,\n  }),\n  // withScriptjs,\n  withGoogleMap,\n  lifecycle({\n    componentDidMount() {\n        const gmaps = google.maps // eslint-disable-line\n\n        const DirectionsService = new gmaps.DirectionsService();\n        DirectionsService.route({\n          origin: new gmaps.LatLng(41.8507300, -87.6512600),\n          destination: new gmaps.LatLng(41.8525800, -87.6514100),\n          travelMode: gmaps.TravelMode.DRIVING,\n        }, (result, status) => {\n          if (status === gmaps.DirectionsStatus.OK) {\n            this.setState({\n              directions: result,\n            });\n          } else {\n            console.error(`error fetching directions ${result}`);\n          }\n        });\n    }\n  })\n)((props) =>\n  <GoogleMap\n    defaultZoom={8}\n    defaultCenter={{ lat: -34.397, lng: 150.644 }}\n  >\n    {props.directions && <DirectionsRenderer directions={props.directions} />}\n  </GoogleMap>\n)\n\nexport default Map\n","import React from 'react'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport MUIPlacesAutocomplete, { geocodeBySuggestion } from 'mui-places-autocomplete'\n\nclass LocationSearch extends React.Component {\n  constructor() {\n    super()\n\n    this.state = { open: false, coordinates: null, errorMessage: null }\n\n    this.onClose = this.onClose.bind(this)\n    this.onSuggestionSelected = this.onSuggestionSelected.bind(this)\n  }\n\n  onClose() {\n    this.setState({ open: false, coordinates: null, errorMessage: null })\n  }\n\n  onSuggestionSelected(suggestion) {\n    geocodeBySuggestion(suggestion).then((results) => {\n      if (results.length < 1) {\n        this.setState({\n          open: true,\n          errorMessage: 'Geocode request completed successfully but without any results',\n        })\n\n        return\n      }\n\n      const { geometry } = results[0]\n\n      const coordinates = {\n        lat: geometry.location.lat(),\n        lng: geometry.location.lng(),\n      }\n\n      this.setState({ open: true, coordinates })\n    }).catch((err) => {\n      this.setState({ open: true, errorMessage: err.message })\n    })\n  }\n\n  renderMessage() {\n    const { coordinates, errorMessage } = this.state\n\n    if (coordinates) {\n      return `Selected suggestions geocoded latitude is ${coordinates.lat} and longitude is ${coordinates.lng}`\n    } else if (errorMessage) {\n      return `Failed to geocode suggestion because: ${errorMessage}`\n    }\n\n    return null\n  }\n\n  render() {\n    const { open } = this.state\n    const { label } = this.props\n    return (\n      <div>\n        <MUIPlacesAutocomplete\n          onSuggestionSelected={this.onSuggestionSelected}\n          renderTarget={() => (<div />)}\n          textFieldProps={{ label }}\n        />\n        <Snackbar\n          onClose={this.onClose}\n          anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n          autoHideDuration={5000}\n          open={open}\n          message={(<span>{this.renderMessage()}</span>)}\n          style={{ width: '70vw' }}\n        />\n      </div>\n    )\n  }\n}\n\nLocationSearch.description = 'Search locations'\n\nexport default LocationSearch\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nimport LocationSearch from './LocationSearch'\n\nconst styles = theme => ({\n  root: {\n    width: '100%',\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    fontWeight: theme.typography.fontWeightRegular,\n  },\n});\n\nfunction Controls(props) {\n  const { classes } = props;\n  return (\n    <div className={classes.root}>\n      <ExpansionPanel expanded={true}>\n        <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n          <Typography className={classes.heading}>Search Weathernav</Typography>\n        </ExpansionPanelSummary>\n        <ExpansionPanelDetails>\n          <LocationSearch label='Search Origin'/>\n          <LocationSearch label='Search Destination'/>\n        </ExpansionPanelDetails>\n      </ExpansionPanel>\n    </div>\n  );\n}\n\nControls.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(Controls);\n","import React, { Component } from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport Map from './components/Map'\nimport Controls from './components/Controls'\n\nclass App extends Component {\n  render() {\n    return (\n      <CssBaseline>\n        <Controls />\n        <Map/>\n      </CssBaseline>\n\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}