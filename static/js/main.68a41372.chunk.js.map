{"version":3,"sources":["containers/WeatherPointsContainer.js","components/WeatherPoint.js","components/WeatherPoints.js","components/Map.js","components/LocationSearch.js","components/Controls.js","components/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["WeatherPointsContainer","google","maps","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","console","log","state","points","setState","render","Component","WeatherPoint","point","react_default","a","createElement","lib","position","defaultVisible","InfoBox","options","closeBoxURL","enableEventPropagation","style","backgroundColor","opacity","padding","fontSize","fontColor","WeatherPoints","map","i","components_WeatherPoint","key","gmaps","enhance","compose","withProps","loadingElement","height","containerElement","mapElement","withGoogleMap","Map","directions","origin","destination","nextProps","_this2","_this$props","onDirections","nextOrigin","nextDestination","lat","lng","DirectionsService","route","LatLng","travelMode","TravelMode","DRIVING","result","status","DirectionsStatus","OK","weatherPoints","defaultZoom","defaultCenter","containers_WeatherPointsContainer","components_WeatherPoints","LocationSearch","open","coordinates","errorMessage","suggestion","geocodeBySuggestion","then","results","length","geometry","location","onCoords","catch","err","message","_this$state","concat","label","dist_default","onSuggestionSelected","bind","renderTarget","textFieldProps","Snackbar_default","onClose","anchorOrigin","vertical","horizontal","autoHideDuration","renderMessage","width","Controls","coords","defineProperty","onRouteSearch","classes","className","root","ExpansionPanel_default","expanded","ExpansionPanelSummary_default","expandIcon","ExpandMore_default","Typography_default","heading","ExpansionPanelDetails_default","components_LocationSearch","withStyles","theme","typography","pxToRem","fontWeight","fontWeightRegular","WEATHER_TIME_INTERVAL","parseInt","process","Navigation","locations","steps","routes","legs","findWeatherPoints","p","end_location","arguments","undefined","travelTime","currStep","currDuration","duration","value","remainingSteps","slice","toConsumableArray","components_Controls","components_Map","assign","App","CssBaseline_default","components_Navigation","Boolean","window","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.68a41372.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose, withProps, toRenderProps } from 'recompose';\n\nconst gmaps = google.maps; // eslint-disable-line\n\nclass WeatherPointsContainer extends Component {\n  constructor(props) {\n    super(props);\n    console.log('constructor');\n    this.state = {\n      points: []\n    };\n  }\n  componentDidMount() {\n    const nextProps = this.props;\n    const { points } = this.props;\n\n    this.setState({ points });\n  }\n  render() {\n    const { points } = this.state;\n    return this.props.render({ points });\n  }\n}\n\nexport default WeatherPointsContainer;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { InfoBox } from 'react-google-maps/lib/components/addons/InfoBox';\nimport { Marker } from 'react-google-maps';\nconst gmaps = google.maps; // eslint-disable-line\n\nclass WeatherPoint extends Component {\n  render() {\n    const { point } = this.props;\n    console.log(point);\n    return (\n      <Marker position={point} defaultVisible={false}>\n        <InfoBox options={{ closeBoxURL: '', enableEventPropagation: true }}>\n          <div\n            style={{ backgroundColor: 'white', opacity: 0.75, padding: '12px' }}\n          >\n            <div style={{ fontSize: '16px', fontColor: '#08233B' }}>\n              Hello, Kaohsiung!\n            </div>\n          </div>\n        </InfoBox>\n      </Marker>\n    );\n  }\n}\n\nWeatherPoint.propTypes = {\n  point: PropTypes.object.isRequired\n};\nexport default WeatherPoint;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport WeatherPoint from './WeatherPoint';\n\nconst gmaps = google.maps; // eslint-disable-line\n\nclass WeatherPoints extends Component {\n  render() {\n    const { points } = this.props;\n    return points.map((point, i) => {\n      return <WeatherPoint key={i} point={point} />;\n    });\n  }\n}\n\nWeatherPoints.propTypes = {\n  points: PropTypes.array.isRequired\n};\nexport default WeatherPoints;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { compose, withProps } from 'recompose';\nimport {\n  withGoogleMap,\n  GoogleMap,\n  DirectionsRenderer\n} from 'react-google-maps';\n\nimport WeatherPointsContainer from '../containers/WeatherPointsContainer';\nimport WeatherPoints from './WeatherPoints';\n\nconst gmaps = google.maps; // eslint-disable-line\n\nconst enhance = compose(\n  withProps({\n    // googleMapURL:\"https://maps.googleapis.com/maps/api/js?exp&libraries=places,directions&key=AIzaSyCD15-lexoV0aFOvKchs4P6B6T-IqdSq-Y\",\n    loadingElement: <div style={{ height: '100%' }} />,\n    containerElement: <div style={{ height: '100vh' }} />,\n    mapElement: <div style={{ height: '100%' }} />\n  }),\n  // withScriptjs,\n  withGoogleMap\n);\n\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      directions: null,\n      origin: null,\n      destination: null\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { origin, destination, onDirections } = this.props;\n    const { origin: nextOrigin, destination: nextDestination } = nextProps;\n    if (!nextOrigin || !nextDestination) return;\n    if (\n      origin &&\n      origin.lat === nextOrigin.lat &&\n      origin.lng === nextOrigin.lng &&\n      destination &&\n      destination.lat === nextDestination.lat &&\n      destination.lng === nextDestination.lng\n    )\n      return;\n\n    const DirectionsService = new gmaps.DirectionsService();\n    DirectionsService.route(\n      {\n        origin: new gmaps.LatLng(nextOrigin.lat, nextOrigin.lng),\n        destination: new gmaps.LatLng(nextDestination.lat, nextDestination.lng),\n        travelMode: gmaps.TravelMode.DRIVING\n      },\n      (result, status) => {\n        if (status === gmaps.DirectionsStatus.OK) {\n          this.setState({\n            directions: result\n          });\n          onDirections(result);\n        }\n      }\n    );\n  }\n\n  render() {\n    const { directions } = this.state;\n    const { weatherPoints } = this.props;\n\n    return (\n      <GoogleMap defaultZoom={8} defaultCenter={{ lat: -34.397, lng: 150.644 }}>\n        {directions && <DirectionsRenderer directions={directions} />}\n        {weatherPoints && (\n          <WeatherPointsContainer\n            points={weatherPoints}\n            render={props => <WeatherPoints {...props} />}\n          />\n        )}\n      </GoogleMap>\n    );\n  }\n}\n\nMap.propTypes = {\n  origin: PropTypes.object,\n  destination: PropTypes.object,\n  onDirections: PropTypes.func.isRequired,\n  weatherPoints: PropTypes.array\n};\nexport default enhance(Map);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MUIPlacesAutocomplete, {\n  geocodeBySuggestion\n} from 'mui-places-autocomplete';\n\nclass LocationSearch extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      open: false,\n      coordinates: null,\n      errorMessage: null\n    };\n  }\n\n  onClose() {\n    this.setState({ open: false, coordinates: null, errorMessage: null });\n  }\n\n  onSuggestionSelected(suggestion) {\n    geocodeBySuggestion(suggestion)\n      .then(results => {\n        if (results.length < 1) {\n          this.setState({\n            open: true,\n            errorMessage:\n              'Geocode request completed successfully but without any results'\n          });\n\n          return;\n        }\n\n        const { geometry } = results[0];\n\n        const coordinates = {\n          lat: geometry.location.lat(),\n          lng: geometry.location.lng()\n        };\n        this.props.onCoords(coordinates);\n        this.setState({ open: true, coordinates });\n      })\n      .catch(err => {\n        this.setState({ open: true, errorMessage: err.message });\n      });\n  }\n\n  renderMessage() {\n    const { coordinates, errorMessage } = this.state;\n\n    if (coordinates) {\n      return `Selected suggestions geocoded latitude is ${\n        coordinates.lat\n      } and longitude is ${coordinates.lng}`;\n    } else if (errorMessage) {\n      return `Failed to geocode suggestion because: ${errorMessage}`;\n    }\n\n    return null;\n  }\n\n  render() {\n    const { open } = this.state;\n    const { label } = this.props;\n    return (\n      <div>\n        <MUIPlacesAutocomplete\n          onSuggestionSelected={this.onSuggestionSelected.bind(this)}\n          renderTarget={() => <div />}\n          textFieldProps={{ label }}\n        />\n        <Snackbar\n          onClose={this.onClose.bind(this)}\n          anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n          autoHideDuration={5000}\n          open={open}\n          message={<span>{this.renderMessage()}</span>}\n          style={{ width: '70vw' }}\n        />\n      </div>\n    );\n  }\n}\n\nLocationSearch.propTypes = {\n  label: PropTypes.string.isRequired,\n  onCoords: PropTypes.func.isRequired\n};\nexport default LocationSearch;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nimport LocationSearch from './LocationSearch';\n\nconst styles = theme => ({\n  root: {\n    width: '100%'\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    fontWeight: theme.typography.fontWeightRegular\n  }\n});\n\nclass Controls extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      origin: null,\n      destination: null\n    };\n  }\n\n  onCoords(location, coords) {\n    this.setState({ [location]: coords });\n    const { origin, destination } = this.state;\n    const { onRouteSearch } = this.props;\n    if (origin && destination) onRouteSearch({ origin, destination });\n  }\n\n  render() {\n    const { classes } = this.props;\n    return (\n      <div className={classes.root}>\n        <ExpansionPanel expanded={true}>\n          <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n            <Typography className={classes.heading}>\n              Search Weathernav\n            </Typography>\n          </ExpansionPanelSummary>\n          <ExpansionPanelDetails>\n            <LocationSearch\n              label=\"Search Origin\"\n              onCoords={this.onCoords.bind(this, 'origin')}\n            />\n            <LocationSearch\n              label=\"Search Destination\"\n              onCoords={this.onCoords.bind(this, 'destination')}\n            />\n          </ExpansionPanelDetails>\n        </ExpansionPanel>\n      </div>\n    );\n  }\n}\n\nControls.propTypes = {\n  classes: PropTypes.object.isRequired,\n  onRouteSearch: PropTypes.func.isRequired\n};\n\nexport default withStyles(styles)(Controls);\n","import React, { Component } from 'react';\n\nimport Map from './Map';\nimport Controls from './Controls';\nconst WEATHER_TIME_INTERVAL = parseInt(\n  process.env.REACT_APP_WEATHER_TIME_INTERVAL\n); // 1hr intervals for weather info\n\nclass Navigation extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      locations: {}\n    };\n  }\n  onRouteSearch(locations) {\n    this.setState({ locations });\n  }\n  onDirections(directions) {\n    const { steps } = directions.routes[0].legs[0];\n\n    const weatherPoints = this.findWeatherPoints(steps).map(\n      p => p.end_location\n    );\n    this.setState({ weatherPoints });\n  }\n\n  findWeatherPoints(steps, weatherPoints = [], travelTime = 0) {\n    if (steps.length <= 0) return weatherPoints;\n\n    const currStep = steps[0];\n    const currDuration = currStep.duration.value;\n    const remainingSteps = steps.slice(1);\n    if (currDuration + travelTime > WEATHER_TIME_INTERVAL) {\n      return this.findWeatherPoints(\n        remainingSteps,\n        [currStep, ...weatherPoints],\n        0\n      );\n    }\n    return this.findWeatherPoints(\n      remainingSteps,\n      weatherPoints,\n      travelTime + currDuration\n    );\n  }\n\n  render() {\n    const { locations, weatherPoints } = this.state;\n    return (\n      <div>\n        <Controls onRouteSearch={this.onRouteSearch.bind(this)} />\n        <Map\n          onDirections={this.onDirections.bind(this)}\n          {...locations}\n          weatherPoints={weatherPoints}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Navigation;\n","import React, { Component } from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport Navigation from './components/Navigation';\n\nclass App extends Component {\n  render() {\n    return (\n      <CssBaseline>\n        <Navigation />\n      </CssBaseline>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}