{"version":3,"sources":["components/Map.js","components/LocationSearch.js","components/Controls.js","components/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["enhance","compose","withProps","loadingElement","react_default","a","createElement","style","height","containerElement","mapElement","withGoogleMap","Map","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","directions","origin","destination","_this2","gmaps","google","maps","_this$props","DirectionsService","route","LatLng","lat","lng","travelMode","TravelMode","DRIVING","result","status","DirectionsStatus","OK","setState","lib","defaultZoom","defaultCenter","Component","LocationSearch","open","coordinates","errorMessage","suggestion","geocodeBySuggestion","then","results","length","geometry","location","onCoords","catch","err","message","_this$state","concat","label","dist_default","onSuggestionSelected","bind","renderTarget","textFieldProps","Snackbar_default","onClose","anchorOrigin","vertical","horizontal","autoHideDuration","renderMessage","width","Controls","coords","defineProperty","onRouteSearch","classes","className","root","ExpansionPanel_default","expanded","ExpansionPanelSummary_default","expandIcon","ExpandMore_default","Typography_default","heading","ExpansionPanelDetails_default","components_LocationSearch","withStyles","theme","fontSize","typography","pxToRem","fontWeight","fontWeightRegular","Navigation","locations","components_Controls","components_Map","App","CssBaseline_default","components_Navigation","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uRAmFeA,EAzECC,YACdC,YAAU,CAERC,eAAgBC,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,OAAQ,UACtCC,iBAAkBL,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,OAAQ,WACxCE,WAAYN,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,OAAQ,YAGpCG,gBAiEaX,aA7Db,SAAAY,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,WAAY,KACZC,OAAQ,KACRC,YAAa,MALEV,oFAuBE,IAAAW,EAAAR,KACbS,EAAQC,OAAOC,KADFC,EAEaZ,KAAKJ,MAA7BU,EAFWM,EAEXN,OAAQC,EAFGK,EAEHL,YAEXD,GAAWC,IAEU,IAAIE,EAAMI,mBAClBC,MAChB,CACER,OAAQ,IAAIG,EAAMM,OAAOT,EAAOU,IAAKV,EAAOW,KAC5CV,YAAa,IAAIE,EAAMM,OAAOR,EAAYS,IAAKT,EAAYU,KAC3DC,WAAYT,EAAMU,WAAWC,SAE/B,SAACC,EAAQC,GACHA,IAAWb,EAAMc,iBAAiBC,IACpChB,EAAKiB,SAAS,CACZpB,WAAYgB,uCAOb,IACChB,EAAeL,KAAKI,MAApBC,WAER,OACElB,EAAAC,EAAAC,cAACqC,EAAA,UAAD,CAAWC,YAAa,EAAGC,cAAe,CAAEZ,KAAM,OAAQC,IAAK,UAC5DZ,GAAclB,EAAAC,EAAAC,cAACqC,EAAA,mBAAD,CAAoBrB,WAAYA,YApDrCwB,6JCsEHC,cAlFb,SAAAA,EAAYlC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8B,IACjBjC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgC,GAAA3B,KAAAH,KAAMJ,KAEDQ,MAAQ,CACX2B,MAAM,EACNC,YAAa,KACbC,aAAc,MANCpC,yEAWjBG,KAAKyB,SAAS,CAAEM,MAAM,EAAOC,YAAa,KAAMC,aAAc,oDAG3CC,GAAY,IAAA1B,EAAAR,KAC/BmC,8BAAoBD,GACjBE,KAAK,SAAAC,GACJ,GAAIA,EAAQC,OAAS,EACnB9B,EAAKiB,SAAS,CACZM,MAAM,EACNE,aACE,uEAJN,CADe,IAWPM,EAAaF,EAAQ,GAArBE,SAEFP,EAAc,CAClBhB,IAAKuB,EAASC,SAASxB,MACvBC,IAAKsB,EAASC,SAASvB,OAEzBT,EAAKZ,MAAM6C,SAAST,GACpBxB,EAAKiB,SAAS,CAAEM,MAAM,EAAMC,mBAE7BU,MAAM,SAAAC,GACLnC,EAAKiB,SAAS,CAAEM,MAAM,EAAME,aAAcU,EAAIC,oDAIpC,IAAAC,EACwB7C,KAAKI,MAAnC4B,EADMa,EACNb,YAAaC,EADPY,EACOZ,aAErB,OAAID,EACF,6CAAAc,OACEd,EAAYhB,IADd,sBAAA8B,OAEqBd,EAAYf,KACxBgB,EACT,yCAAAa,OAAgDb,GAG3C,sCAGA,IACCF,EAAS/B,KAAKI,MAAd2B,KACAgB,EAAU/C,KAAKJ,MAAfmD,MACR,OACE5D,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC2D,EAAA5D,EAAD,CACE6D,qBAAsBjD,KAAKiD,qBAAqBC,KAAKlD,MACrDmD,aAAc,kBAAMhE,EAAAC,EAAAC,cAAA,aACpB+D,eAAgB,CAAEL,WAEpB5D,EAAAC,EAAAC,cAACgE,EAAAjE,EAAD,CACEkE,QAAStD,KAAKsD,QAAQJ,KAAKlD,MAC3BuD,aAAc,CAAEC,SAAU,SAAUC,WAAY,UAChDC,iBAAkB,IAClB3B,KAAMA,EACNa,QAASzD,EAAAC,EAAAC,cAAA,YAAOW,KAAK2D,iBACrBrE,MAAO,CAAEsE,MAAO,kBAxEG/B,aCavBgC,cACJ,SAAAA,EAAYjE,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA6D,IACjBhE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA+D,GAAA1D,KAAAH,KAAMJ,KACDQ,MAAQ,CACXE,OAAQ,KACRC,YAAa,MAJEV,wEAQV2C,EAAUsB,GACjB9D,KAAKyB,SAAL3B,OAAAiE,EAAA,EAAAjE,CAAA,GAAiB0C,EAAWsB,IADH,IAAAjB,EAEO7C,KAAKI,MAA7BE,EAFiBuC,EAEjBvC,OAAQC,EAFSsC,EAETtC,YACRyD,EAAkBhE,KAAKJ,MAAvBoE,cACJ1D,GAAUC,GAAayD,EAAc,CAAE1D,SAAQC,iDAG5C,IACC0D,EAAYjE,KAAKJ,MAAjBqE,QACR,OACE9E,EAAAC,EAAAC,cAAA,OAAK6E,UAAWD,EAAQE,MACtBhF,EAAAC,EAAAC,cAAC+E,EAAAhF,EAAD,CAAgBiF,UAAU,GACxBlF,EAAAC,EAAAC,cAACiF,EAAAlF,EAAD,CAAuBmF,WAAYpF,EAAAC,EAAAC,cAACmF,EAAApF,EAAD,OACjCD,EAAAC,EAAAC,cAACoF,EAAArF,EAAD,CAAY8E,UAAWD,EAAQS,SAA/B,sBAIFvF,EAAAC,EAAAC,cAACsF,EAAAvF,EAAD,KACED,EAAAC,EAAAC,cAACuF,EAAD,CACE7B,MAAM,gBACNN,SAAUzC,KAAKyC,SAASS,KAAKlD,KAAM,YAErCb,EAAAC,EAAAC,cAACuF,EAAD,CACE7B,MAAM,qBACNN,SAAUzC,KAAKyC,SAASS,KAAKlD,KAAM,2BAjC1B6B,aA+CRgD,uBAzDA,SAAAC,GAAK,MAAK,CACvBX,KAAM,CACJP,MAAO,QAETc,QAAS,CACPK,SAAUD,EAAME,WAAWC,QAAQ,IACnCC,WAAYJ,EAAME,WAAWG,qBAmDlBN,CAAmBhB,GCzCnBuB,cArBb,SAAAA,EAAYxF,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAoF,IACjBvF,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsF,GAAAjF,KAAAH,KAAMJ,KACDQ,MAAQ,CACXiF,UAAW,IAHIxF,6EAMLwF,GACZrF,KAAKyB,SAAS,CAAE4D,+CAGT,IACCA,EAAcrF,KAAKI,MAAnBiF,UACR,OACElG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACiG,EAAD,CAAUtB,cAAehE,KAAKgE,cAAcd,KAAKlD,QACjDb,EAAAC,EAAAC,cAACkG,EAAQF,WAhBQxD,aCUV2D,mLARX,OACErG,EAAAC,EAAAC,cAACoG,EAAArG,EAAD,KACED,EAAAC,EAAAC,cAACqG,EAAD,cAJU7D,aCOE8D,QACW,cAA7BC,OAAOpD,SAASqD,UAEe,UAA7BD,OAAOpD,SAASqD,UAEhBD,OAAOpD,SAASqD,SAASC,MACvB,2DCZNC,IAASC,OAAO7G,EAAAC,EAAAC,cAAC4G,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlE,KAAK,SAAAmE,GACjCA,EAAaC","file":"static/js/main.cdf87432.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { compose, withProps } from 'recompose';\nimport {\n  withGoogleMap,\n  GoogleMap,\n  DirectionsRenderer\n} from 'react-google-maps';\n\nconst enhance = compose(\n  withProps({\n    // googleMapURL:\"https://maps.googleapis.com/maps/api/js?exp&libraries=places,directions&key=AIzaSyCD15-lexoV0aFOvKchs4P6B6T-IqdSq-Y\",\n    loadingElement: <div style={{ height: '100%' }} />,\n    containerElement: <div style={{ height: '100vh' }} />,\n    mapElement: <div style={{ height: '100%' }} />\n  }),\n  // withScriptjs,\n  withGoogleMap\n);\n\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      directions: null,\n      origin: null,\n      destination: null\n    };\n  }\n  // shouldComponentUpdate(nextProps) {\n  //   console.log('nextProps', nextProps);\n  //   console.log('props', this.props);\n  //   const { origin, destination } = this.props\n  //   const { origin: nextOrigin, destination: nextDestination} = nextProps\n  //   if(!origin || !destination || !nextOrigin || !nextDestination) return true\n  //   console.log('here');\n  //   return (\n  //     origin.lat !== nextOrigin.lat ||\n  //     origin.lng !== nextOrigin.lng ||\n  //     destination.lat !== nextDestination.lat ||\n  //     destination.lng !== nextDestination.lng\n  //   )\n  // }\n\n  componentDidUpdate() {\n    const gmaps = google.maps; // eslint-disable-line\n    const { origin, destination } = this.props;\n\n    if (!origin || !destination) return;\n\n    const DirectionsService = new gmaps.DirectionsService();\n    DirectionsService.route(\n      {\n        origin: new gmaps.LatLng(origin.lat, origin.lng),\n        destination: new gmaps.LatLng(destination.lat, destination.lng),\n        travelMode: gmaps.TravelMode.DRIVING\n      },\n      (result, status) => {\n        if (status === gmaps.DirectionsStatus.OK) {\n          this.setState({\n            directions: result\n          });\n        }\n      }\n    );\n  }\n\n  render() {\n    const { directions } = this.state;\n\n    return (\n      <GoogleMap defaultZoom={8} defaultCenter={{ lat: -34.397, lng: 150.644 }}>\n        {directions && <DirectionsRenderer directions={directions} />}\n      </GoogleMap>\n    );\n  }\n}\n\nMap.propTypes = {\n  origin: PropTypes.object,\n  destination: PropTypes.object\n};\nexport default enhance(Map);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MUIPlacesAutocomplete, {\n  geocodeBySuggestion\n} from 'mui-places-autocomplete';\n\nclass LocationSearch extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      open: false,\n      coordinates: null,\n      errorMessage: null\n    };\n  }\n\n  onClose() {\n    this.setState({ open: false, coordinates: null, errorMessage: null });\n  }\n\n  onSuggestionSelected(suggestion) {\n    geocodeBySuggestion(suggestion)\n      .then(results => {\n        if (results.length < 1) {\n          this.setState({\n            open: true,\n            errorMessage:\n              'Geocode request completed successfully but without any results'\n          });\n\n          return;\n        }\n\n        const { geometry } = results[0];\n\n        const coordinates = {\n          lat: geometry.location.lat(),\n          lng: geometry.location.lng()\n        };\n        this.props.onCoords(coordinates);\n        this.setState({ open: true, coordinates });\n      })\n      .catch(err => {\n        this.setState({ open: true, errorMessage: err.message });\n      });\n  }\n\n  renderMessage() {\n    const { coordinates, errorMessage } = this.state;\n\n    if (coordinates) {\n      return `Selected suggestions geocoded latitude is ${\n        coordinates.lat\n      } and longitude is ${coordinates.lng}`;\n    } else if (errorMessage) {\n      return `Failed to geocode suggestion because: ${errorMessage}`;\n    }\n\n    return null;\n  }\n\n  render() {\n    const { open } = this.state;\n    const { label } = this.props;\n    return (\n      <div>\n        <MUIPlacesAutocomplete\n          onSuggestionSelected={this.onSuggestionSelected.bind(this)}\n          renderTarget={() => <div />}\n          textFieldProps={{ label }}\n        />\n        <Snackbar\n          onClose={this.onClose.bind(this)}\n          anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n          autoHideDuration={5000}\n          open={open}\n          message={<span>{this.renderMessage()}</span>}\n          style={{ width: '70vw' }}\n        />\n      </div>\n    );\n  }\n}\n\nLocationSearch.propTypes = {\n  label: PropTypes.string.isRequired,\n  onCoords: PropTypes.func.isRequired\n};\nexport default LocationSearch;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nimport LocationSearch from './LocationSearch';\n\nconst styles = theme => ({\n  root: {\n    width: '100%'\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    fontWeight: theme.typography.fontWeightRegular\n  }\n});\n\nclass Controls extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      origin: null,\n      destination: null\n    };\n  }\n\n  onCoords(location, coords) {\n    this.setState({ [location]: coords });\n    const { origin, destination } = this.state;\n    const { onRouteSearch } = this.props;\n    if (origin && destination) onRouteSearch({ origin, destination });\n  }\n\n  render() {\n    const { classes } = this.props;\n    return (\n      <div className={classes.root}>\n        <ExpansionPanel expanded={true}>\n          <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n            <Typography className={classes.heading}>\n              Search Weathernav\n            </Typography>\n          </ExpansionPanelSummary>\n          <ExpansionPanelDetails>\n            <LocationSearch\n              label=\"Search Origin\"\n              onCoords={this.onCoords.bind(this, 'origin')}\n            />\n            <LocationSearch\n              label=\"Search Destination\"\n              onCoords={this.onCoords.bind(this, 'destination')}\n            />\n          </ExpansionPanelDetails>\n        </ExpansionPanel>\n      </div>\n    );\n  }\n}\n\nControls.propTypes = {\n  classes: PropTypes.object.isRequired,\n  onRouteSearch: PropTypes.func.isRequired\n};\n\nexport default withStyles(styles)(Controls);\n","import React, { Component } from 'react';\n\nimport Map from './Map';\nimport Controls from './Controls';\n\nclass Navigation extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      locations: {}\n    };\n  }\n  onRouteSearch(locations) {\n    this.setState({ locations });\n  }\n\n  render() {\n    const { locations } = this.state;\n    return (\n      <div>\n        <Controls onRouteSearch={this.onRouteSearch.bind(this)} />\n        <Map {...locations} />\n      </div>\n    );\n  }\n}\n\nexport default Navigation;\n","import React, { Component } from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport Navigation from './components/Navigation';\n\nclass App extends Component {\n  render() {\n    return (\n      <CssBaseline>\n        <Navigation />\n      </CssBaseline>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}