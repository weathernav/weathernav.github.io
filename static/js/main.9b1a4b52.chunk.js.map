{"version":3,"sources":["containers/NavigationContainer.js","containers/MapContainer.js","containers/WeatherPointsContainer.js","components/WeatherPoint.js","components/WeatherPoints.js","components/Map.js","components/LocationSearch.js","containers/LocationSearchContainer.js","components/Controls.js","components/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["WEATHER_TIME_INTERVAL","parseInt","process","NavigationContainer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","locations","setState","directions","steps","routes","legs","weatherPoints","findWeatherPoints","map","p","end_location","arguments","length","undefined","travelTime","currStep","currDuration","duration","value","remainingSteps","slice","concat","toConsumableArray","_this$state","onRouteSearch","bind","onDirections","render","Component","gmaps","google","maps","MapContainer","origin","destination","nextProps","_this2","_this$props","nextOrigin","nextDestination","lat","lng","DirectionsService","route","LatLng","travelMode","TravelMode","DRIVING","result","status","DirectionsStatus","OK","WeatherPointsContainer","points","WeatherPoint","point","console","log","react_default","a","createElement","lib","position","defaultVisible","InfoBox","options","closeBoxURL","enableEventPropagation","style","backgroundColor","opacity","padding","fontSize","fontColor","WeatherPoints","i","components_WeatherPoint","key","enhance","compose","withProps","loadingElement","height","containerElement","mapElement","withGoogleMap","defaultZoom","defaultCenter","containers_WeatherPointsContainer","components_WeatherPoints","LocationSearch","label","onSuggestionSelected","dist_default","renderTarget","textFieldProps","LocationSearchContainer","coordinates","err","suggestion","geocodeBySuggestion","then","results","Error","geometry","location","onCoords","catch","Controls","coords","defineProperty","classes","className","root","ExpansionPanel_default","expanded","ExpansionPanelSummary_default","expandIcon","ExpandMore_default","Typography_default","heading","ExpansionPanelDetails_default","containers_LocationSearchContainer","components_LocationSearch","assign","withStyles","theme","width","typography","pxToRem","fontWeight","fontWeightRegular","Navigation","components_Controls","containers_MapContainer","components_Map","App","CssBaseline_default","containers_NavigationContainer","components_Navigation","Boolean","window","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9b1a4b52.chunk.js","sourcesContent":["import { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nconst WEATHER_TIME_INTERVAL = parseInt(\n  process.env.REACT_APP_WEATHER_TIME_INTERVAL\n); // 1hr intervals for weather info\n\nclass NavigationContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      locations: {}\n    };\n  }\n  onRouteSearch(locations) {\n    this.setState({ locations });\n  }\n  onDirections(directions) {\n    const { steps } = directions.routes[0].legs[0];\n    const weatherPoints = this.findWeatherPoints(steps).map(\n      p => p.end_location\n    );\n    this.setState({ weatherPoints });\n  }\n\n  findWeatherPoints(steps, weatherPoints = [], travelTime = 0) {\n    if (steps.length <= 0) return weatherPoints;\n\n    const currStep = steps[0];\n    const currDuration = currStep.duration.value;\n    const remainingSteps = steps.slice(1);\n    if (currDuration + travelTime > WEATHER_TIME_INTERVAL) {\n      return this.findWeatherPoints(\n        remainingSteps,\n        [currStep, ...weatherPoints],\n        0\n      );\n    }\n    return this.findWeatherPoints(\n      remainingSteps,\n      weatherPoints,\n      travelTime + currDuration\n    );\n  }\n\n  render() {\n    const { locations, weatherPoints } = this.state;\n    const onRouteSearch = this.onRouteSearch.bind(this);\n    const onDirections = this.onDirections.bind(this);\n    return this.props.render({\n      locations,\n      weatherPoints,\n      onRouteSearch,\n      onDirections\n    });\n  }\n}\n\nNavigationContainer.propTypes = {\n  render: PropTypes.func.isRequired\n};\nexport default NavigationContainer;\n","import { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nconst gmaps = google.maps; // eslint-disable-line\n\nclass MapContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      directions: null,\n      origin: null,\n      destination: null\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { origin, destination, onDirections } = this.props;\n    const { origin: nextOrigin, destination: nextDestination } = nextProps;\n    if (!nextOrigin || !nextDestination) return;\n    if (\n      origin &&\n      origin.lat === nextOrigin.lat &&\n      origin.lng === nextOrigin.lng &&\n      destination &&\n      destination.lat === nextDestination.lat &&\n      destination.lng === nextDestination.lng\n    )\n      return;\n\n    const DirectionsService = new gmaps.DirectionsService();\n    DirectionsService.route(\n      {\n        origin: new gmaps.LatLng(nextOrigin.lat, nextOrigin.lng),\n        destination: new gmaps.LatLng(nextDestination.lat, nextDestination.lng),\n        travelMode: gmaps.TravelMode.DRIVING\n      },\n      (result, status) => {\n        if (status === gmaps.DirectionsStatus.OK) {\n          this.setState({\n            directions: result\n          });\n          onDirections(result);\n        }\n      }\n    );\n  }\n\n  render() {\n    const { directions } = this.state;\n    return this.props.render({ directions });\n  }\n}\n\nMapContainer.propTypes = {\n  onDirections: PropTypes.func.isRequired,\n  origin: PropTypes.object,\n  destination: PropTypes.object,\n  render: PropTypes.func.isRequired\n};\nexport default MapContainer;\n","import { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nconst gmaps = google.maps; // eslint-disable-line\n\nclass WeatherPointsContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      points: []\n    };\n  }\n  componentDidMount() {\n    const { points } = this.props;\n\n    this.setState({ points });\n  }\n  render() {\n    const { points } = this.state;\n    return this.props.render({ points });\n  }\n}\n\nWeatherPointsContainer.propTypes = {\n  render: PropTypes.func.isRequired\n};\n\nexport default WeatherPointsContainer;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { InfoBox } from 'react-google-maps/lib/components/addons/InfoBox';\nimport { Marker } from 'react-google-maps';\nconst gmaps = google.maps; // eslint-disable-line\n\nclass WeatherPoint extends Component {\n  render() {\n    const { point } = this.props;\n    console.log(point);\n    return (\n      <Marker position={point} defaultVisible={false}>\n        <InfoBox options={{ closeBoxURL: '', enableEventPropagation: true }}>\n          <div\n            style={{ backgroundColor: 'white', opacity: 0.75, padding: '12px' }}\n          >\n            <div style={{ fontSize: '16px', fontColor: '#08233B' }}>\n              Hello, Kaohsiung!\n            </div>\n          </div>\n        </InfoBox>\n      </Marker>\n    );\n  }\n}\n\nWeatherPoint.propTypes = {\n  point: PropTypes.object.isRequired\n};\nexport default WeatherPoint;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport WeatherPoint from './WeatherPoint';\n\nconst gmaps = google.maps; // eslint-disable-line\n\nclass WeatherPoints extends Component {\n  render() {\n    const { points } = this.props;\n    return points.map((point, i) => {\n      return <WeatherPoint key={i} point={point} />;\n    });\n  }\n}\n\nWeatherPoints.propTypes = {\n  points: PropTypes.array.isRequired\n};\nexport default WeatherPoints;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { compose, withProps } from 'recompose';\nimport {\n  withGoogleMap,\n  GoogleMap,\n  DirectionsRenderer\n} from 'react-google-maps';\n\nimport WeatherPointsContainer from '../containers/WeatherPointsContainer';\nimport WeatherPoints from './WeatherPoints';\n\nconst gmaps = google.maps; // eslint-disable-line\n\nconst enhance = compose(\n  withProps({\n    loadingElement: <div style={{ height: '100%' }} />,\n    containerElement: <div style={{ height: '100vh' }} />,\n    mapElement: <div style={{ height: '100%' }} />\n  }),\n  withGoogleMap\n);\n\nclass Map extends Component {\n  render() {\n    const { weatherPoints, directions } = this.props;\n    return (\n      <GoogleMap defaultZoom={8} defaultCenter={{ lat: -34.397, lng: 150.644 }}>\n        {directions && <DirectionsRenderer directions={directions} />}\n        {weatherPoints && (\n          <WeatherPointsContainer\n            points={weatherPoints}\n            render={props => <WeatherPoints {...props} />}\n          />\n        )}\n      </GoogleMap>\n    );\n  }\n}\n\nMap.propTypes = {\n  directions: PropTypes.object,\n  weatherPoints: PropTypes.array\n};\nexport default enhance(Map);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport MUIPlacesAutocomplete from 'mui-places-autocomplete';\n\nclass LocationSearch extends Component {\n  render() {\n    const { label, onSuggestionSelected } = this.props;\n    return (\n      <div>\n        <MUIPlacesAutocomplete\n          onSuggestionSelected={onSuggestionSelected}\n          renderTarget={() => <div />}\n          textFieldProps={{ label }}\n        />\n      </div>\n    );\n  }\n}\n\nLocationSearch.propTypes = {\n  label: PropTypes.string.isRequired,\n  onSuggestionSelected: PropTypes.func.isRequired\n};\nexport default LocationSearch;\n","import { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { geocodeBySuggestion } from 'mui-places-autocomplete';\n\nclass LocationSearchContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      coordinates: null,\n      err: null\n    };\n  }\n\n  onSuggestionSelected(suggestion) {\n    geocodeBySuggestion(suggestion)\n      .then(results => {\n        if (results.length < 1) {\n          this.setState({\n            err: new Error(\n              'Geocode request completed successfully but without any results'\n            )\n          });\n\n          return;\n        }\n\n        const { geometry } = results[0];\n\n        const coordinates = {\n          lat: geometry.location.lat(),\n          lng: geometry.location.lng()\n        };\n        this.props.onCoords(coordinates);\n        this.setState({ coordinates });\n      })\n      .catch(err => {\n        this.setState({ err: err });\n      });\n  }\n\n  render() {\n    const { err } = this.state;\n    return this.props.render({\n      err,\n      onSuggestionSelected: this.onSuggestionSelected.bind(this)\n    });\n  }\n}\n\nLocationSearchContainer.propTypes = {\n  onCoords: PropTypes.func.isRequired,\n  render: PropTypes.func.isRequired\n};\nexport default LocationSearchContainer;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nimport LocationSearch from './LocationSearch';\nimport LocationSearchContainer from '../containers/LocationSearchContainer';\n\nconst styles = theme => ({\n  root: {\n    width: '100%'\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    fontWeight: theme.typography.fontWeightRegular\n  }\n});\n\nclass Controls extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      origin: null,\n      destination: null\n    };\n  }\n\n  onCoords(location, coords) {\n    this.setState({ [location]: coords });\n    const { origin, destination } = this.state;\n    const { onRouteSearch } = this.props;\n    if (origin && destination) onRouteSearch({ origin, destination });\n  }\n\n  render() {\n    const { classes } = this.props;\n    return (\n      <div className={classes.root}>\n        <ExpansionPanel expanded={true}>\n          <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n            <Typography className={classes.heading}>\n              Search Weathernav\n            </Typography>\n          </ExpansionPanelSummary>\n          <ExpansionPanelDetails>\n            <LocationSearchContainer\n              onCoords={this.onCoords.bind(this, 'origin')}\n              render={props => (\n                <LocationSearch label=\"Search Origin\" {...props} />\n              )}\n            />\n            <LocationSearchContainer\n              onCoords={this.onCoords.bind(this, 'destination')}\n              render={props => (\n                <LocationSearch label=\"Search Origin\" {...props} />\n              )}\n            />\n          </ExpansionPanelDetails>\n        </ExpansionPanel>\n      </div>\n    );\n  }\n}\n\nControls.propTypes = {\n  classes: PropTypes.object.isRequired,\n  onRouteSearch: PropTypes.func.isRequired\n};\n\nexport default withStyles(styles)(Controls);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport MapContainer from '../containers/MapContainer';\nimport Map from './Map';\nimport Controls from './Controls';\n\nclass Navigation extends Component {\n  render() {\n    const {\n      locations,\n      weatherPoints,\n      onRouteSearch,\n      onDirections\n    } = this.props;\n    return (\n      <div>\n        <Controls onRouteSearch={onRouteSearch} />\n        <MapContainer\n          onDirections={onDirections}\n          {...locations}\n          render={props => <Map weatherPoints={weatherPoints} {...props} />}\n        />\n      </div>\n    );\n  }\n}\n\nNavigation.propTypes = {\n  locations: PropTypes.object,\n  weatherPoints: PropTypes.array,\n  onRouteSearch: PropTypes.func.isRequired,\n  onDirections: PropTypes.func.isRequired\n};\nexport default Navigation;\n","import React, { Component } from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport NavigationContainer from './containers/NavigationContainer';\nimport Navigation from './components/Navigation';\n\nclass App extends Component {\n  render() {\n    return (\n      <CssBaseline>\n        <NavigationContainer render={props => <Navigation {...props} />} />\n      </CssBaseline>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}